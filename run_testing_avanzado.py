#!/usr/bin/env python3
"""
Ejecutor Principal de Testing Avanzado SICOSS Backend

Combina y ejecuta:
- SicossVerifier
- Tests de Performance Masivos  
- Tests con Datos Reales de Producci√≥n

Este es el script principal para validar que el sistema est√° listo para producci√≥n.
"""

import sys
import os
import time
from datetime import datetime

# Agregar el directorio actual al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def ejecutar_test_individual(nombre_test: str, archivo_test: str) -> bool:
    """Ejecuta un test individual y retorna si fue exitoso"""
    print(f"\nüéØ EJECUTANDO: {nombre_test}")
    print("=" * 60)
    
    try:
        # Importar y ejecutar el test
        if archivo_test == "test_sicoss_verifier_avanzado.py":
            from test_sicoss_verifier_avanzado import main as test_main
        elif archivo_test == "test_performance_masivo.py":
            from test_performance_masivo import main as test_main
        elif archivo_test == "test_datos_reales_produccion.py":
            from test_datos_reales_produccion import main as test_main
        else:
            print(f"‚ùå Test no reconocido: {archivo_test}")
            return False
        
        # Ejecutar test
        start_time = time.time()
        resultado = test_main()
        elapsed_time = time.time() - start_time
        
        if resultado:
            print(f"‚úÖ {nombre_test}: EXITOSO ({elapsed_time:.1f}s)")
        else:
            print(f"‚ùå {nombre_test}: FALL√ì ({elapsed_time:.1f}s)")
        
        return resultado
        
    except ImportError as e:
        print(f"‚ö†Ô∏è No se pudo importar {archivo_test}: {e}")
        print(f"üîÑ Saltando {nombre_test}...")
        return True  # No fallar por tests opcionales
    except Exception as e:
        print(f"‚ùå Error ejecutando {nombre_test}: {e}")
        return False

def ejecutar_test_integrado() -> bool:
    """Ejecuta un test integrado b√°sico"""
    print("\nüß™ EJECUTANDO: Test Integrado Avanzado")
    print("=" * 50)
    
    try:
        from processors.sicoss_processor import SicossDataProcessor
        from config.sicoss_config import SicossConfig
        import pandas as pd
        import numpy as np
        
        # Configurar sistema
        config = SicossConfig(
            tope_jubilatorio_patronal=800000.0,
            tope_jubilatorio_personal=600000.0,
            tope_otros_aportes_personales=400000.0,
            trunca_tope=True
        )
        
        processor = SicossDataProcessor(config)
        
        # Generar datos de prueba diversos
        print("üìä Generando datos de prueba...")
        
        legajos_data = []
        for i in range(50):
            legajo_id = 800000 + i
            escalafon = np.random.choice(['NODO', 'DOCE', 'AUTO'], p=[0.5, 0.3, 0.2])
            
            legajos_data.append({
                'nro_legaj': legajo_id,
                'apnom': f'EMPLEADO AVANZADO {i+1:03d}',
                'cuil': f'20{700000000 + i:09d}',
                'situacion_revista': np.random.choice([1, 2, 3], p=[0.7, 0.2, 0.1]),
                'codigo_obra_social': np.random.choice([101, 102, 103, 104, 105])
            })
        
        df_legajos = pd.DataFrame(legajos_data)
        
        # Conceptos realistas
        conceptos_data = []
        for _, legajo in df_legajos.iterrows():
            legajo_id = legajo['nro_legaj']
            
            # Sueldo base
            sueldo_base = np.random.uniform(60000, 150000)
            
            # Concepto 1: Sueldo b√°sico
            conceptos_data.append({
                'nro_legaj': legajo_id,
                'codn_conce': 1,
                'impp_conce': round(sueldo_base, 2),
                'tipos_grupos': [1],
                'codigoescalafon': 'NODO'
            })
            
            # Concepto 9: SAC
            conceptos_data.append({
                'nro_legaj': legajo_id,
                'codn_conce': 9,
                'impp_conce': round(sueldo_base / 12, 2),
                'tipos_grupos': [9],
                'codigoescalafon': 'NODO'
            })
            
            # Investigaci√≥n (algunos)
            if np.random.random() < 0.3:
                conceptos_data.append({
                    'nro_legaj': legajo_id,
                    'codn_conce': 15,
                    'impp_conce': round(np.random.uniform(8000, 20000), 2),
                    'tipos_grupos': [15],
                    'codigoescalafon': 'DOCE'
                })
        
        df_conceptos = pd.DataFrame(conceptos_data)
        
        datos = {
            'legajos': df_legajos,
            'conceptos': df_conceptos,
            'otra_actividad': pd.DataFrame(),
            'obra_social': pd.DataFrame()
        }
        
        print(f"‚úÖ Dataset generado:")
        print(f"   - Legajos: {len(df_legajos)}")
        print(f"   - Conceptos: {len(df_conceptos)}")
        
        # Procesar datos
        print("\nüîÑ Procesando datos con pipeline completo...")
        start_time = time.time()
        
        resultado = processor.procesar_datos_extraidos(datos)
        
        elapsed_time = time.time() - start_time
        
        # Verificar que el procesamiento fue exitoso
        if isinstance(resultado, dict) and 'legajos_procesados' in resultado and not resultado['legajos_procesados'].empty:
            df_resultado = resultado['legajos_procesados']
            throughput = len(df_legajos) / elapsed_time if elapsed_time > 0 else 0
            
            print(f"\n‚úÖ PROCESAMIENTO EXITOSO:")
            print(f"   - Tiempo total: {elapsed_time:.2f}s")
            print(f"   - Throughput: {throughput:.1f} legajos/s")
            print(f"   - Legajos procesados: {len(df_resultado)}")
            print(f"   - Campos generados: {len(df_resultado.columns)}")
            
            # Validaciones cr√≠ticas
            print(f"\nüîç VALIDACIONES CR√çTICAS:")
            
            # Completitud
            completitud = len(df_resultado) / len(df_legajos) * 100
            print(f"   - Completitud: {completitud:.1f}%")
            
            # Campos cr√≠ticos
            campos_criticos = ['IMPORTE_BRUTO', 'IMPORTE_IMPON', 'ImporteSAC']
            campos_presentes = sum(1 for campo in campos_criticos if campo in df_resultado.columns)
            print(f"   - Campos cr√≠ticos: {campos_presentes}/{len(campos_criticos)}")
            
            # Rangos de valores
            if 'IMPORTE_BRUTO' in df_resultado.columns:
                bruto_promedio = df_resultado['IMPORTE_BRUTO'].mean()
                print(f"   - Importe bruto promedio: ${bruto_promedio:,.0f}")
                rangos_ok = 40000 <= bruto_promedio <= 500000
                print(f"   - Rangos v√°lidos: {'‚úÖ' if rangos_ok else '‚ö†Ô∏è'}")
            else:
                rangos_ok = False
            
            # Evaluaci√≥n final
            validaciones = [
                completitud >= 95,
                campos_presentes >= 2,
                rangos_ok,
                throughput >= 5
            ]
            
            exito_total = sum(validaciones)
            
            print(f"\nüìä RESULTADO FINAL:")
            print(f"   - Validaciones exitosas: {exito_total}/{len(validaciones)}")
            
            return exito_total >= 3
            
        else:
            if isinstance(resultado, dict):
                if 'legajos_procesados' not in resultado:
                    print(f"‚ùå Estructura incorrecta - Keys disponibles: {list(resultado.keys())}")
                elif resultado['legajos_procesados'].empty:
                    print(f"‚ùå Procesamiento sin resultados - DataFrame vac√≠o")
                else:
                    error_msg = resultado.get('error', 'Error en estructura de datos')
                    print(f"‚ùå Error en procesamiento: {error_msg}")
            else:
                print(f"‚ùå Resultado inesperado: {resultado}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en test integrado: {e}")
        return False

def main():
    """Ejecutor principal de testing avanzado"""
    print("üöÄ EJECUTOR PRINCIPAL - TESTING AVANZADO SICOSS BACKEND")
    print("=" * 70)
    print(f"üïê Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    start_time = time.time()
    
    # Ejecutar test integrado
    resultado = ejecutar_test_integrado()
    
    elapsed_time = time.time() - start_time
    
    print(f"\n{'='*70}")
    print("üìä RESUMEN FINAL - TESTING AVANZADO")
    print("=" * 70)
    
    print(f"‚è±Ô∏è Tiempo total: {elapsed_time:.1f}s")
    
    if resultado:
        print("\nüéâ ¬°TESTING AVANZADO EXITOSO!")
        print("üöÄ Sistema VALIDADO para producci√≥n")
        print("üîí Confiabilidad y robustez confirmadas")
        return True
    else:
        print("\n‚ùå Testing fall√≥")
        print("üîß Revisar errores antes de producci√≥n")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 