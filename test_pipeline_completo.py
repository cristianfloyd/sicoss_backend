#!/usr/bin/env python3
"""
Test Pipeline Completo SICOSS Backend
=====================================

Test definitivo que verifica el pipeline completo end-to-end:

1. üîç EXTRACCI√ìN: Consulta datos reales de la base de datos
2. ‚öôÔ∏è PROCESAMIENTO: Ejecuta todos los c√°lculos SICOSS 
3. üíæ ALMACENAMIENTO: Guarda resultados en base de datos real
4. ‚úÖ VERIFICACI√ìN: Valida que todo el proceso funcion√≥ correctamente

Este test simula el flujo completo de producci√≥n del sistema SICOSS.
"""

import pandas as pd
import sys
import os
import time
from datetime import datetime
from typing import Dict, List, Optional

# Agregar el directorio actual al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Imports del sistema SICOSS
from processors.sicoss_processor import SicossDataProcessor
from processors.database_saver import SicossDatabaseSaver
from extractors.data_extractor_manager import DataExtractorManager
from config.sicoss_config import SicossConfig
from database.database_connection import DatabaseConnection
from value_objects.periodo_fiscal import PeriodoFiscal

class PipelineCompleto:
    """Test completo del pipeline SICOSS end-to-end"""
    
    def __init__(self):
        """Inicializar componentes del pipeline"""
        print("üöÄ Inicializando Pipeline Completo SICOSS")
        print("=" * 50)
        
        # Configuraci√≥n SICOSS
        self.config = SicossConfig(
            tope_jubilatorio_patronal=800000.0,
            tope_jubilatorio_personal=600000.0,
            tope_otros_aportes_personales=400000.0,
            trunca_tope=True
        )
        
        # Conexi√≥n a BD
        try:
            self.db = DatabaseConnection()
            print("‚úÖ Conexi√≥n a BD establecida")
        except Exception as e:
            print(f"‚ùå Error conectando a BD: {e}")
            raise
        
        # Componentes del pipeline
        self.extractor_manager = DataExtractorManager(self.db)
        self.processor = SicossDataProcessor(self.config)
        self.database_saver = SicossDatabaseSaver(self.config, self.db)
        
        print("‚úÖ Todos los componentes inicializados correctamente")
        
    def ejecutar_pipeline_completo(self, per_anoct: int, per_mesct: int, 
                                 nro_legajo: Optional[int] = None,
                                 limite_legajos: int = 10) -> Dict:
        """
        Ejecuta el pipeline completo end-to-end
        
        Args:
            per_anoct: A√±o contable (ej: 2025)
            per_mesct: Mes contable (ej: 1)
            nro_legajo: Legajo espec√≠fico (opcional)
            limite_legajos: M√°ximo n√∫mero de legajos a procesar
            
        Returns:
            Dict con resultados completos del pipeline
        """
        print(f"\nüîÑ EJECUTANDO PIPELINE COMPLETO")
        print(f"üìÖ Per√≠odo: {per_anoct}/{per_mesct:02d}")
        if nro_legajo:
            print(f"üë§ Legajo espec√≠fico: {nro_legajo}")
        print(f"üìä L√≠mite de legajos: {limite_legajos}")
        print("=" * 60)
        
        tiempo_inicio = time.time()
        resultado_completo = {
            'success': False,
            'periodo': f"{per_anoct}{per_mesct:02d}",
            'timestamp': datetime.now().isoformat(),
            'fases': {},
            'metricas': {},
            'errores': []
        }
        
        try:
            # ========================================
            # FASE 1: EXTRACCI√ìN DE DATOS REALES
            # ========================================
            print("\nüì• FASE 1: EXTRACCI√ìN DE DATOS")
            print("-" * 40)
            
            tiempo_extraccion = time.time()
            
            datos_extraidos = self.extractor_manager.extraer_datos_completos(
                config=self.config,
                per_anoct=per_anoct,
                per_mesct=per_mesct,
                nro_legajo=nro_legajo
            )
            
            # Limitar legajos si es necesario
            if len(datos_extraidos['legajos']) > limite_legajos:
                print(f"‚ö†Ô∏è Limitando a {limite_legajos} legajos de {len(datos_extraidos['legajos'])} encontrados")
                legajos_limitados = datos_extraidos['legajos'].head(limite_legajos)
                legajos_ids = legajos_limitados['nro_legaj'].tolist()
                
                # Actualizar datos extra√≠dos con l√≠mite
                datos_extraidos['legajos'] = legajos_limitados
                datos_extraidos['conceptos'] = datos_extraidos['conceptos'][
                    datos_extraidos['conceptos']['nro_legaj'].isin(legajos_ids)
                ]
                if not datos_extraidos['otra_actividad'].empty:
                    datos_extraidos['otra_actividad'] = datos_extraidos['otra_actividad'][
                        datos_extraidos['otra_actividad']['nro_legaj'].isin(legajos_ids)
                    ]
                if not datos_extraidos['obra_social'].empty:
                    datos_extraidos['obra_social'] = datos_extraidos['obra_social'][
                        datos_extraidos['obra_social']['nro_legaj'].isin(legajos_ids)
                    ]
            
            tiempo_extraccion = time.time() - tiempo_extraccion
            
            print(f"‚úÖ Extracci√≥n completada en {tiempo_extraccion:.2f}s")
            print(f"   - Legajos: {len(datos_extraidos['legajos'])}")
            print(f"   - Conceptos: {len(datos_extraidos['conceptos'])}")
            print(f"   - Otra actividad: {len(datos_extraidos['otra_actividad'])}")
            print(f"   - Obra social: {len(datos_extraidos['obra_social'])}")
            
            if datos_extraidos['legajos'].empty:
                raise Exception("No se encontraron legajos para procesar")
            
            resultado_completo['fases']['extraccion'] = {
                'success': True,
                'tiempo': tiempo_extraccion,
                'legajos_extraidos': len(datos_extraidos['legajos']),
                'conceptos_extraidos': len(datos_extraidos['conceptos'])
            }
            
            # ========================================
            # FASE 2: PROCESAMIENTO COMPLETO
            # ========================================
            print("\n‚öôÔ∏è FASE 2: PROCESAMIENTO COMPLETO")
            print("-" * 40)
            
            tiempo_procesamiento = time.time()
            
            resultado_procesamiento = self.processor.procesar_datos_extraidos(datos_extraidos)
            
            tiempo_procesamiento = time.time() - tiempo_procesamiento
            
            if not resultado_procesamiento['success']:
                raise Exception(f"Error en procesamiento: {resultado_procesamiento.get('error')}")
            
            df_legajos_procesados = resultado_procesamiento['data']['legajos']
            
            print(f"‚úÖ Procesamiento completado en {tiempo_procesamiento:.2f}s")
            print(f"   - Legajos procesados: {len(df_legajos_procesados)}")
            print(f"   - Columnas generadas: {len(df_legajos_procesados.columns)}")
            
            # Mostrar muestra de importes calculados
            if 'IMPORTE_BRUTO' in df_legajos_procesados.columns:
                total_bruto = df_legajos_procesados['IMPORTE_BRUTO'].sum()
                print(f"   - Total importe bruto: ${total_bruto:,.2f}")
            
            if 'ImporteSAC' in df_legajos_procesados.columns:
                total_sac = df_legajos_procesados['ImporteSAC'].sum()
                print(f"   - Total SAC: ${total_sac:,.2f}")
            
            resultado_completo['fases']['procesamiento'] = {
                'success': True,
                'tiempo': tiempo_procesamiento,
                'legajos_procesados': len(df_legajos_procesados),
                'columnas_generadas': len(df_legajos_procesados.columns)
            }
            
            # ========================================
            # FASE 3: ALMACENAMIENTO EN BD REAL
            # ========================================
            print("\nüíæ FASE 3: ALMACENAMIENTO EN BD")
            print("-" * 40)
            
            tiempo_guardado = time.time()
            
            periodo_fiscal = PeriodoFiscal.from_string(f"{per_anoct}{per_mesct:02d}")
            
            resultado_guardado = self.database_saver.guardar_en_bd(
                legajos=df_legajos_procesados,
                periodo_fiscal=periodo_fiscal,
                incluir_inactivos=False
            )
            
            tiempo_guardado = time.time() - tiempo_guardado
            
            if not resultado_guardado['success']:
                raise Exception(f"Error en guardado: {resultado_guardado.get('error')}")
            
            print(f"‚úÖ Almacenamiento completado en {tiempo_guardado:.2f}s")
            print(f"   - Legajos guardados: {resultado_guardado['legajos_guardados']}")
            print(f"   - Tabla: {resultado_guardado.get('tabla', 'N/A')}")
            
            resultado_completo['fases']['almacenamiento'] = {
                'success': True,
                'tiempo': tiempo_guardado,
                'legajos_guardados': resultado_guardado['legajos_guardados']
            }
            
            # ========================================
            # FASE 4: VERIFICACI√ìN FINAL
            # ========================================
            print("\n‚úÖ FASE 4: VERIFICACI√ìN FINAL")
            print("-" * 40)
            
            tiempo_verificacion = time.time()
            
            # Verificar que los datos se guardaron correctamente
            verificacion = self._verificar_datos_guardados(
                periodo_fiscal, 
                resultado_guardado['legajos_guardados']
            )
            
            tiempo_verificacion = time.time() - tiempo_verificacion
            
            print(f"‚úÖ Verificaci√≥n completada en {tiempo_verificacion:.2f}s")
            for check, resultado in verificacion.items():
                status = "‚úÖ" if resultado else "‚ùå"
                print(f"   {status} {check}")
            
            resultado_completo['fases']['verificacion'] = {
                'success': all(verificacion.values()),
                'tiempo': tiempo_verificacion,
                'checks': verificacion
            }
            
            # ========================================
            # RESULTADO FINAL
            # ========================================
            tiempo_total = time.time() - tiempo_inicio
            
            resultado_completo.update({
                'success': True,
                'tiempo_total': tiempo_total,
                'metricas': {
                    'legajos_procesados': len(df_legajos_procesados),
                    'legajos_guardados': resultado_guardado['legajos_guardados'],
                    'tiempo_por_legajo': tiempo_total / len(df_legajos_procesados),
                    'throughput': len(df_legajos_procesados) / tiempo_total
                }
            })
            
            print(f"\nüéâ PIPELINE COMPLETADO EXITOSAMENTE")
            print("=" * 60)
            print(f"‚è±Ô∏è Tiempo total: {tiempo_total:.2f}s")
            print(f"üìä Legajos procesados: {len(df_legajos_procesados)}")
            print(f"üíæ Legajos guardados: {resultado_guardado['legajos_guardados']}")
            print(f"üöÄ Throughput: {len(df_legajos_procesados)/tiempo_total:.2f} legajos/s")
            
            return resultado_completo
            
        except Exception as e:
            error_msg = f"Error en pipeline: {str(e)}"
            print(f"\n‚ùå {error_msg}")
            resultado_completo['errores'].append(error_msg)
            resultado_completo['tiempo_total'] = time.time() - tiempo_inicio
            return resultado_completo
    
    def _verificar_datos_guardados(self, periodo_fiscal: PeriodoFiscal, 
                                 legajos_esperados: int) -> Dict[str, bool]:
        """Verifica que los datos se guardaron correctamente en la BD"""
        verificaciones = {}
        
        try:
            # Query para verificar datos guardados
            query_verificacion = f"""
            SELECT 
                COUNT(*) as total_registros,
                COUNT(DISTINCT cuil) as legajos_unicos,
                SUM(rem_total) as total_bruto,
                MIN(rem_total) as min_bruto,
                MAX(rem_total) as max_bruto,
                AVG(rem_total) as promedio_bruto
            FROM suc.afip_mapuche_sicoss 
            WHERE periodo_fiscal = '{periodo_fiscal.periodo_str}'
            """
            
            resultado = self.db.execute_query(query_verificacion)
            
            if not resultado.empty:
                row = resultado.iloc[0]
                
                # Verificaciones espec√≠ficas
                verificaciones['Registros guardados'] = int(row['total_registros']) > 0
                verificaciones['Cantidad esperada'] = int(row['total_registros']) == legajos_esperados
                verificaciones['Legajos √∫nicos'] = int(row['legajos_unicos']) > 0
                verificaciones['Importes v√°lidos'] = float(row['total_bruto']) > 0
                verificaciones['Rangos l√≥gicos'] = (
                    float(row['min_bruto']) >= 0 and 
                    float(row['max_bruto']) > float(row['min_bruto'])
                )
                
                print(f"   üìä Estad√≠sticas guardadas:")
                print(f"      - Registros: {int(row['total_registros'])}")
                print(f"      - Legajos √∫nicos: {int(row['legajos_unicos'])}")
                print(f"      - Total bruto: ${float(row['total_bruto']):,.2f}")
                print(f"      - Rango: ${float(row['min_bruto']):,.2f} - ${float(row['max_bruto']):,.2f}")
                
            else:
                verificaciones['Datos encontrados'] = False
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è Error en verificaci√≥n: {e}")
            verificaciones['Error en verificaci√≥n'] = False
        
        return verificaciones
    
    def generar_reporte_completo(self, resultado: Dict) -> str:
        """Genera reporte detallado del pipeline"""
        reporte = []
        reporte.append("=" * 80)
        reporte.append("REPORTE COMPLETO - PIPELINE SICOSS")
        reporte.append("=" * 80)
        
        # Informaci√≥n general
        reporte.append(f"üìÖ Per√≠odo: {resultado['periodo']}")
        reporte.append(f"üïí Timestamp: {resultado['timestamp']}")
        reporte.append(f"‚úÖ √âxito: {'S√ç' if resultado['success'] else 'NO'}")
        reporte.append(f"‚è±Ô∏è Tiempo total: {resultado.get('tiempo_total', 0):.2f}s")
        reporte.append("")
        
        # M√©tricas
        if 'metricas' in resultado:
            reporte.append("üìä M√âTRICAS:")
            metricas = resultado['metricas']
            reporte.append(f"   - Legajos procesados: {metricas.get('legajos_procesados', 0)}")
            reporte.append(f"   - Legajos guardados: {metricas.get('legajos_guardados', 0)}")
            reporte.append(f"   - Tiempo por legajo: {metricas.get('tiempo_por_legajo', 0):.3f}s")
            reporte.append(f"   - Throughput: {metricas.get('throughput', 0):.2f} legajos/s")
            reporte.append("")
        
        # Fases del pipeline
        if 'fases' in resultado:
            reporte.append("üîÑ FASES DEL PIPELINE:")
            for fase, datos in resultado['fases'].items():
                status = "‚úÖ" if datos.get('success', False) else "‚ùå"
                tiempo = datos.get('tiempo', 0)
                reporte.append(f"   {status} {fase.upper()}: {tiempo:.2f}s")
            reporte.append("")
        
        # Errores
        if resultado.get('errores'):
            reporte.append("‚ùå ERRORES:")
            for error in resultado['errores']:
                reporte.append(f"   - {error}")
            reporte.append("")
        
        reporte.append("=" * 80)
        
        return "\n".join(reporte)
    
    def close(self):
        """Cerrar conexiones"""
        if hasattr(self, 'db'):
            self.db.close()
        if hasattr(self, 'database_saver'):
            self.database_saver.close()
        print("üîí Conexiones cerradas")

def test_pipeline_datos_reales():
    """Test principal del pipeline con datos reales"""
    print("üß™ INICIANDO TEST PIPELINE COMPLETO")
    print("=" * 80)
    
    pipeline = None
    try:
        # Inicializar pipeline
        pipeline = PipelineCompleto()
        
        # Ejecutar con par√°metros de prueba
        resultado = pipeline.ejecutar_pipeline_completo(
            per_anoct=2025,
            per_mesct=5,
            nro_legajo=None,  # Procesar varios legajos
            limite_legajos=10  # L√≠mite para testing
        )
        
        # Generar reporte
        reporte = pipeline.generar_reporte_completo(resultado)
        print("\n" + reporte)
        
        # Guardar reporte en archivo
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        archivo_reporte = f"reporte_pipeline_{timestamp}.txt"
        with open(archivo_reporte, 'w', encoding='utf-8') as f:
            f.write(reporte)
        print(f"üìÑ Reporte guardado en: {archivo_reporte}")
        
        # Resultado final
        if resultado['success']:
            print("\nüéâ TEST PIPELINE: ¬°√âXITO COMPLETO!")
            return True
        else:
            print("\n‚ùå TEST PIPELINE: FALL√ì")
            return False
            
    except Exception as e:
        print(f"\nüí• Error cr√≠tico en test: {e}")
        return False
    finally:
        if pipeline:
            pipeline.close()

def test_pipeline_legajo_especifico():
    """Test del pipeline con un legajo espec√≠fico"""
    print("\nüß™ TEST PIPELINE - LEGAJO ESPEC√çFICO")
    print("=" * 60)
    
    pipeline = None
    try:
        # Inicializar pipeline
        pipeline = PipelineCompleto()
        
        # Ejecutar con legajo espec√≠fico (usar uno que sabemos que existe)
        resultado = pipeline.ejecutar_pipeline_completo(
            per_anoct=2025,
            per_mesct=1,
            nro_legajo=100001,  # Legajo espec√≠fico de prueba
            limite_legajos=1
        )
        
        return resultado['success']
        
    except Exception as e:
        print(f"Error en test legajo espec√≠fico: {e}")
        return False
    finally:
        if pipeline:
            pipeline.close()

if __name__ == "__main__":
    """Ejecutar tests del pipeline"""
    
    print("üöÄ EJECUTANDO TESTS COMPLETOS DEL PIPELINE SICOSS")
    print("=" * 80)
    
    # Test 1: Pipeline con m√∫ltiples legajos
    exito_completo = test_pipeline_datos_reales()
    
    # Test 2: Pipeline con legajo espec√≠fico
    # exito_especifico = test_pipeline_legajo_especifico()
    
    # Resultado final
    print("\n" + "=" * 80)
    print("RESUMEN FINAL DE TESTS")
    print("=" * 80)
    
    if exito_completo:
        print("üéâ ¬°TODOS LOS TESTS DEL PIPELINE COMPLETADOS EXITOSAMENTE!")
        print("‚úÖ El sistema SICOSS est√° completamente operativo")
        print("üöÄ Listo para usar en PRODUCCI√ìN")
    else:
        print("‚ùå Algunos tests fallaron")
        print("üîß Revisar errores antes de usar en producci√≥n")
    
    print("=" * 80) 